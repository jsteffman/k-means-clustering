knitr::opts_chunk$set(echo = FALSE)
hc<-read.csv("hierarchical-clustering.csv")
View(hc)
library(tidyverse)
library(tidyverse)
library(cowplot)
library(ggthemes)
library(NbClust)
library(gifski)
library(fontawesome)
theme_set(theme_cowplot(16))
# load in model f0
model_f0<-read.csv("b8_resynth_target_hz.csv")
speaker_means_wide <- time_series_data %>%
group_by(id, normtime, tune) %>%
select(-c(f0,erb,trial_num,)) %>%
summarize(erb_scaled.mean = mean(erb_scaled),.groups="keep") %>%
spread(normtime, erb_scaled.mean)  %>% mutate(id_tune=paste0(id,tune)) ->speaker_means_wide;rm(time_series_data)
time_series_data<-read.csv("basic8_time_series_data.csv")
time_series_data<-read.csv("basic8_time_series_data.csv")
speaker_means_wide <- time_series_data %>%
group_by(id, normtime, tune) %>%
select(-c(f0,erb,trial_num,)) %>%
summarize(erb_scaled.mean = mean(erb_scaled),.groups="keep") %>%
spread(normtime, erb_scaled.mean)  %>% mutate(id_tune=paste0(id,tune)) ->speaker_means_wide;rm(time_series_data)
speaker_means_wide <- time_series_data %>%
group_by(id, normtime, tune) %>%
select(-c(f0,erb,trial_num,)) %>%
summarize(erb_scaled.mean = mean(erb_scaled),.groups="keep") %>%
spread(normtime, erb_scaled.mean)  %>% mutate(id_tune=paste0(id,tune)) ->speaker_means_wide;rm(time_series_data)
end <- which(names(speaker_means_wide)=="30")
# create object for clustering
group_cluster_model <- cld(speaker_means_wide, idAll=speaker_means_wide$id_tune, timeInData=start:end, time=c(start:end))
# run clustering algorithm
kml(group_cluster_model, nbClusters = 2:10)
# inspect solution
try(choice(speaker_means_wide))
# add cluster label to trajectory, if desired
speaker_means_wide$cluster_2<- getClusters(group_cluster_model, 2)
speaker_means_wide$cluster_5<- getClusters(group_cluster_model, 5)
# create object for clustering
group_cluster_model <- cld(speaker_means_wide, idAll=speaker_means_wide$id_tune, timeInData=start:end, time=c(start:end))
library(kml)
# create object for clustering
group_cluster_model <- cld(speaker_means_wide, idAll=speaker_means_wide$id_tune, timeInData=start:end, time=c(start:end))
# set up parameters for clustering
start <- which(names(speaker_means_wide)=="1")
end <- which(names(speaker_means_wide)=="30")
# create object for clustering
group_cluster_model <- cld(speaker_means_wide, idAll=speaker_means_wide$id_tune, timeInData=start:end, time=c(start:end))
# run clustering algorithm
kml(group_cluster_model, nbClusters = 2:10)
# run clustering algorithm
kml(group_cluster_model, nbClusters = 2:10)
# inspect solution
try(choice(speaker_means_wide))
# add cluster label to trajectory, if desired
speaker_means_wide$cluster_2<- getClusters(group_cluster_model, 2)
speaker_means_wide$cluster_5<- getClusters(group_cluster_model, 5)
speaker_means_wide$cluster_8<- getClusters(group_cluster_model, 8)
speaker_means_wide %>% gather("normtime","scaled_erb",3:32) %>%
mutate(propdur=as.numeric(normtime)/30)-> cluster_solutions
cluster_solutions %>%
ggplot(aes(x= propdur,y= scaled_erb,group=id_tune))+
ylab("normalised ERB")+ylab("prop. word duration")+
geom_line(alpha=0.3)
cluster_solutions$id_tune
hc$id_tune
hc$label
hc$interval_label
cluster_solutions$id_tune
hc %>% mutate(id_tune = str_sub(interval_label,"_",""))
hc %>% mutate(id_tune = str_sub(interval_label,"_","")) ->TEST
View(TEST)
hc %>% mutate(id_tune = str_replace(interval_label,"_","")) ->TEST
View(speaker_means_wide)
View(TEST)
View(TEST)
View(TEST)
hc %>% mutate(toupper(id_tune = str_replace(interval_label,"_",""))) -> hc
hc %>% mutate(id_tune = toupper(str_replace(interval_label,"_",""))) -> hc
hc$cluster
hc %>% mutate(id_tune = toupper(str_replace(interval_label,"_","")),
hc_cluster = cluster) %>%
select(hc_cluster,id_tune)
hc %>% mutate(id_tune = toupper(str_replace(interval_label,"_","")),
hc_cluster = cluster) %>%
select(hc_cluster,id_tune) -> hc
View(hc)
left_join(cluster_solutions,hc)
hc %>%
mutate(cluster= as.factor(hc_cluster)) %>%
ggplot(aes(x= normtime/30,y= scaled_erb,group=id_tune,color=cluster,fill=cluster))+
ylab("normalised ERB")+xlab("prop. word duration")+
ylim(-2.25,2.8)+
geom_line(alpha=0.3,size=0.8)+scale_color_calc()-> traj_5_clusters1hc
cluster_solutions %>%
mutate(cluster= as.factor(hc_cluster)) %>%
ggplot(aes(x= normtime/30,y= scaled_erb,group=id_tune,color=cluster,fill=cluster))+
ylab("normalised ERB")+xlab("prop. word duration")+
ylim(-2.25,2.8)+
geom_line(alpha=0.3,size=0.8)+scale_color_calc()-> traj_5_clusters1hc
hc %>% mutate(id_tune = toupper(str_replace(interval_label,"_","")),
hc_cluster = cluster) %>%
select(hc_cluster,id_tune) -> hc
hc<-read.csv("hierarchical-clustering.csv")
hc %>% mutate(id_tune = toupper(str_replace(interval_label,"_","")),
hc_cluster = cluster) %>%
select(hc_cluster,id_tune) -> hc
left_join(cluster_solutions,hc) -> cluster_solutions
cluster_solutions %>%
mutate(cluster= as.factor(hc_cluster)) %>%
ggplot(aes(x= normtime/30,y= scaled_erb,group=id_tune,color=cluster,fill=cluster))+
ylab("normalised ERB")+xlab("prop. word duration")+
ylim(-2.25,2.8)+
geom_line(alpha=0.3,size=0.8)+scale_color_calc()-> traj_5_clusters1hc
traj_5_clusters1hc
View(cluster_solutions)
cluster_solutions %>%
mutate(cluster= as.factor(hc_cluster)) %>%
ggplot(aes(x= normtime/30,y= scaled_erb,group=id_tune,color=cluster,fill=cluster))+
ylab("normalised ERB")+xlab("prop. word duration")+
ylim(-2.25,2.8)+
geom_line(alpha=0.3,size=0.8)+scale_color_calc()
cluster_solutions %>%
mutate(cluster= as.factor(hc_cluster)) %>%
ggplot(aes(x= propdur,y= scaled_erb,group=id_tune,color=cluster,fill=cluster))+
ylab("normalised ERB")+xlab("prop. word duration")+
ylim(-2.25,2.8)+
geom_line(alpha=0.3,size=0.8)+scale_color_calc()-> traj_5_clusters1hc
traj_5_clusters1hc
hc %>%
mutate(cluster= as.factor(cluster)) %>%
ggplot(aes(x= propdur,y= scaled_erb,group=id_tune,color=cluster,fill=cluster))+
ylab("normalised ERB")+xlab("prop. word duration")+
geom_line(alpha=0.15,size=0.8)+scale_color_calc()+scale_fill_calc()+
ylim(-2.25,2.8)+
stat_summary(geom="point",aes(group=cluster),pch=21,color="black",size=2.8)-> traj_5_clusters2hc
plot_grid(traj_no_colors+theme(legend.position = "none"),
traj_no_colors+theme(legend.position = "none"),nrow = 1)
